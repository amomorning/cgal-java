/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package CGAL.Point_set_processing_3;

import CGAL.Kernel.Point_3;
import CGAL.Kernel.Vector_3;
import CGAL.Point_set_3.Point_set_3;
import CGAL.Point_set_3.Point_set_3_Int_map;
import java.util.Iterator;
import java.util.Collection;

public class CGAL_Point_set_processing_3 {
  public static void bilateral_smooth_point_set(Point_set_3 point_set, int k, double neighbor_radius, double sharpness_angle) {
    CGAL_Point_set_processing_3JNI.bilateral_smooth_point_set__SWIG_0(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, sharpness_angle);
  }

  public static void bilateral_smooth_point_set(Point_set_3 point_set, int k, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.bilateral_smooth_point_set__SWIG_1(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius);
  }

  public static void bilateral_smooth_point_set(Point_set_3 point_set, int k) {
    CGAL_Point_set_processing_3JNI.bilateral_smooth_point_set__SWIG_2(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static double compute_average_spacing(Point_set_3 point_set, int k) {
    return CGAL_Point_set_processing_3JNI.compute_average_spacing(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static void edge_aware_upsample_point_set(Point_set_3 point_set, double sharpness_angle, double edge_sensitivity, double neighbor_radius, int number_of_output_points) {
    CGAL_Point_set_processing_3JNI.edge_aware_upsample_point_set__SWIG_0(Point_set_3.getCPtr(point_set), point_set, sharpness_angle, edge_sensitivity, neighbor_radius, number_of_output_points);
  }

  public static void edge_aware_upsample_point_set(Point_set_3 point_set, double sharpness_angle, double edge_sensitivity, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.edge_aware_upsample_point_set__SWIG_1(Point_set_3.getCPtr(point_set), point_set, sharpness_angle, edge_sensitivity, neighbor_radius);
  }

  public static void edge_aware_upsample_point_set(Point_set_3 point_set, double sharpness_angle, double edge_sensitivity) {
    CGAL_Point_set_processing_3JNI.edge_aware_upsample_point_set__SWIG_2(Point_set_3.getCPtr(point_set), point_set, sharpness_angle, edge_sensitivity);
  }

  public static void edge_aware_upsample_point_set(Point_set_3 point_set, double sharpness_angle) {
    CGAL_Point_set_processing_3JNI.edge_aware_upsample_point_set__SWIG_3(Point_set_3.getCPtr(point_set), point_set, sharpness_angle);
  }

  public static void edge_aware_upsample_point_set(Point_set_3 point_set) {
    CGAL_Point_set_processing_3JNI.edge_aware_upsample_point_set__SWIG_4(Point_set_3.getCPtr(point_set), point_set);
  }

  public static int estimate_global_k_neighbor_scale(Point_set_3 point_set) {
    return CGAL_Point_set_processing_3JNI.estimate_global_k_neighbor_scale(Point_set_3.getCPtr(point_set), point_set);
  }

  public static double estimate_global_range_scale(Point_set_3 point_set) {
    return CGAL_Point_set_processing_3JNI.estimate_global_range_scale(Point_set_3.getCPtr(point_set), point_set);
  }

  public static void grid_simplify_point_set(Point_set_3 point_set, double epsilon) {
    CGAL_Point_set_processing_3JNI.grid_simplify_point_set(Point_set_3.getCPtr(point_set), point_set, epsilon);
  }

  public static void hierarchy_simplify_point_set(Point_set_3 point_set, int size, double maximum_variation) {
    CGAL_Point_set_processing_3JNI.hierarchy_simplify_point_set__SWIG_0(Point_set_3.getCPtr(point_set), point_set, size, maximum_variation);
  }

  public static void hierarchy_simplify_point_set(Point_set_3 point_set, int size) {
    CGAL_Point_set_processing_3JNI.hierarchy_simplify_point_set__SWIG_1(Point_set_3.getCPtr(point_set), point_set, size);
  }

  public static void hierarchy_simplify_point_set(Point_set_3 point_set) {
    CGAL_Point_set_processing_3JNI.hierarchy_simplify_point_set__SWIG_2(Point_set_3.getCPtr(point_set), point_set);
  }

  public static void jet_estimate_normals(Point_set_3 point_set, int k, double neighbor_radius, int degree_fitting) {
    CGAL_Point_set_processing_3JNI.jet_estimate_normals__SWIG_0(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, degree_fitting);
  }

  public static void jet_estimate_normals(Point_set_3 point_set, int k, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.jet_estimate_normals__SWIG_1(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius);
  }

  public static void jet_estimate_normals(Point_set_3 point_set, int k) {
    CGAL_Point_set_processing_3JNI.jet_estimate_normals__SWIG_2(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static void jet_smooth_point_set(Point_set_3 point_set, int k, double neighbor_radius, int degree_fitting, int degree_monge) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_0(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, degree_fitting, degree_monge);
  }

  public static void jet_smooth_point_set(Point_set_3 point_set, int k, double neighbor_radius, int degree_fitting) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_1(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, degree_fitting);
  }

  public static void jet_smooth_point_set(Point_set_3 point_set, int k, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_2(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius);
  }

  public static void jet_smooth_point_set(Point_set_3 point_set, int k) {
    CGAL_Point_set_processing_3JNI.jet_smooth_point_set__SWIG_3(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static void mst_orient_normals(Point_set_3 point_set, int k, double neighbor_radius, Point_set_3_Int_map constrained_map) {
    CGAL_Point_set_processing_3JNI.mst_orient_normals__SWIG_0(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, Point_set_3_Int_map.getCPtr(constrained_map), constrained_map);
  }

  public static void mst_orient_normals(Point_set_3 point_set, int k, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.mst_orient_normals__SWIG_1(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius);
  }

  public static void mst_orient_normals(Point_set_3 point_set, int k) {
    CGAL_Point_set_processing_3JNI.mst_orient_normals__SWIG_2(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static void pca_estimate_normals(Point_set_3 point_set, int k, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.pca_estimate_normals__SWIG_0(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius);
  }

  public static void pca_estimate_normals(Point_set_3 point_set, int k) {
    CGAL_Point_set_processing_3JNI.pca_estimate_normals__SWIG_1(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static void random_simplify_point_set(Point_set_3 point_set, double removed_percentage) {
    CGAL_Point_set_processing_3JNI.random_simplify_point_set(Point_set_3.getCPtr(point_set), point_set, removed_percentage);
  }

  public static void remove_outliers(Point_set_3 point_set, int k, double neighbor_radius, double threshold_percent, double threshold_distance) {
    CGAL_Point_set_processing_3JNI.remove_outliers__SWIG_0(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, threshold_percent, threshold_distance);
  }

  public static void remove_outliers(Point_set_3 point_set, int k, double neighbor_radius, double threshold_percent) {
    CGAL_Point_set_processing_3JNI.remove_outliers__SWIG_1(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius, threshold_percent);
  }

  public static void remove_outliers(Point_set_3 point_set, int k, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.remove_outliers__SWIG_2(Point_set_3.getCPtr(point_set), point_set, k, neighbor_radius);
  }

  public static void remove_outliers(Point_set_3 point_set, int k) {
    CGAL_Point_set_processing_3JNI.remove_outliers__SWIG_3(Point_set_3.getCPtr(point_set), point_set, k);
  }

  public static void vcm_estimate_normals(Point_set_3 point_set, double offset_radius, double convolution_radius, int k) {
    CGAL_Point_set_processing_3JNI.vcm_estimate_normals__SWIG_0(Point_set_3.getCPtr(point_set), point_set, offset_radius, convolution_radius, k);
  }

  public static void vcm_estimate_normals(Point_set_3 point_set, double offset_radius, double convolution_radius) {
    CGAL_Point_set_processing_3JNI.vcm_estimate_normals__SWIG_1(Point_set_3.getCPtr(point_set), point_set, offset_radius, convolution_radius);
  }

  public static void wlop_simplify_and_regularize_point_set(Point_set_3 input, Point_set_3 output, double select_percentage, double neighbor_radius, int number_of_iterations, boolean require_uniform_sampling) {
    CGAL_Point_set_processing_3JNI.wlop_simplify_and_regularize_point_set__SWIG_0(Point_set_3.getCPtr(input), input, Point_set_3.getCPtr(output), output, select_percentage, neighbor_radius, number_of_iterations, require_uniform_sampling);
  }

  public static void wlop_simplify_and_regularize_point_set(Point_set_3 input, Point_set_3 output, double select_percentage, double neighbor_radius, int number_of_iterations) {
    CGAL_Point_set_processing_3JNI.wlop_simplify_and_regularize_point_set__SWIG_1(Point_set_3.getCPtr(input), input, Point_set_3.getCPtr(output), output, select_percentage, neighbor_radius, number_of_iterations);
  }

  public static void wlop_simplify_and_regularize_point_set(Point_set_3 input, Point_set_3 output, double select_percentage, double neighbor_radius) {
    CGAL_Point_set_processing_3JNI.wlop_simplify_and_regularize_point_set__SWIG_2(Point_set_3.getCPtr(input), input, Point_set_3.getCPtr(output), output, select_percentage, neighbor_radius);
  }

  public static void wlop_simplify_and_regularize_point_set(Point_set_3 input, Point_set_3 output, double select_percentage) {
    CGAL_Point_set_processing_3JNI.wlop_simplify_and_regularize_point_set__SWIG_3(Point_set_3.getCPtr(input), input, Point_set_3.getCPtr(output), output, select_percentage);
  }

  public static void wlop_simplify_and_regularize_point_set(Point_set_3 input, Point_set_3 output) {
    CGAL_Point_set_processing_3JNI.wlop_simplify_and_regularize_point_set__SWIG_4(Point_set_3.getCPtr(input), input, Point_set_3.getCPtr(output), output);
  }

}
